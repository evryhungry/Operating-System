[69]        fork - create a child process
[81]        The new process is referred to as the <i>child</i> process.  The calling
[84]        The child process and the parent process run in separate memory
[90]        The child process is an exact duplicate of the parent process
[93]        •  The child has its own unique process ID, and this PID does not
[97]        •  The child's parent process ID is the same as the parent's
[100]        •  The child does not inherit its parent's memory locks (<a href="../man2/mlock.2.html">mlock(2)</a>,
[104]           counters (<a href="../man2/times.2.html">times(2)</a>) are reset to zero in the child.
[106]        •  The child's set of pending signals is initially empty
[109]        •  The child does not inherit semaphore adjustments from its
[112]        •  The child does not inherit process-associated record locks from
[117]        •  The child does not inherit timers from its parent
[120]        •  The child does not inherit outstanding asynchronous I/O
[126]        POSIX.1.  The parent and child also differ with respect to the
[129]        •  The child does not inherit directory change notifications
[134]           child does not receive a signal when its parent terminates.
[144]           <a href="../man2/madvise.2.html">madvise(2)</a> <b>MADV_WIPEONFORK </b>flag is zeroed in the child after a
[146]           those address ranges in the child.)
[148]        •  The termination signal of the child is always <b>SIGCHLD </b>(see
[152]           inherited by the child; the child must turn on any bits that it
[157]        •  The child process is created with a single thread—the one that
[159]           is replicated in the child, including the states of mutexes,
[164]        •  After a <b>fork</b>() in a multithreaded program, the child can safely
[168]        •  The child inherits copies of the parent's set of open file
[169]           descriptors.  Each file descriptor in the child refers to the
[176]        •  The child inherits copies of the parent's set of open message
[178]           in the child refers to the same open message queue description
[182]        •  The child inherits copies of the parent's set of open directory
[184]           directory streams in the parent and child <i>may</i> share the
[188]        On success, the PID of the child process is returned in the
[189]        parent, and 0 is returned in the child.  On failure, -1 is
[190]        returned in the parent, no child process is created, and <i><a href="../man3/errno.3.html">errno</a></i> is
[219]        <b>ENOMEM </b>An attempt was made to create a child process in a PID
[250]        structure for the child.
